#summary One-sentence summary of this page.

== Getting a Database Connection ==

To load or save the user object in the database, we need a database session 

{{{
with ADO.Sessions;
...
  Session : ADO.Sessions.Session := Factory.Get_Session;
}}}


== Creating a database record ==

First, we will declare a variable that will represent the new database record.  The `User_Ref` represents such record.
{{{
  User : User_Ref
}}}

After this declaration, the variable does not refer to any database record.  We can still set some fields:

{{{
  User.Set_Name ("Harry");
  User.Set_Age (17);
}}}

To save the object in the database, we just need to call the `Save` operation.  To save the object, we need
a database session that is capable of updating and inserting new rows.  If the object does not yet have a primary key,
and if the primary key allocation mode is set to `hilo`, the ADO runtime will allocate a new unique primary key
before inserting the new row.

{{{
  User.Save (Session);
}}}

The primary key can be obtained after the first `Save` with the following operation:

{{{
  Id : ADO.Identifier := User.Get_Id;
}}}

== Loading a database record ==

Loading a database record is quite easy and the ADO framework proposes two mechanisms.  First, let's declare our user variable:

{{{
  Harry : User_Ref;
}}}

Then we can load the user record from the primary key identifier (assuming the identifier is ''23'':

{{{
  Harry.Load (Session, 23);
}}}

If the user cannot be found, the `Load` operation will raise the `NOT_FOUND` exception.

In many cases, we may not know the primary key but a search on one or several columns may be necessary.
For this, we can create a query filter and use the `Find` operation.  To use a query filter, we need
first to declare a `Query` object:

{{{
with ADO.SQL;
...
  Query : ADO.SQL.Query;
}}}

On the query object, we have to define the filter which represents the
condition and set the possible parameters used by the filter.

{{{
  Query.Bind_Param (1, "Harry");
  Query.Set_Filter ("name = ?"); 
}}}

Once the query is defined and initialized, we can find the database record:

{{{
  User.Find (Session, Query, Found);
}}}

Unlike the `Load` operation, `Find` does not raise an exception but instead returns a boolean value
telling whether the record was found or not.  The database query (and filter) has to return exactly one
record to consider the object as found.

== Getting a list of objects ==

When several records have to be read, it is necessary to use the `List` operation together with
a vector object.

{{{
  Users : User_Vector;
}}}

{{{
  List (Users, DB, Query);
}}}